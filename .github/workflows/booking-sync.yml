name: Booking Sync

on:
  workflow_dispatch:
    inputs:
      organization_id:
        description: Organization ID to sync PAX for
        required: true
        type: string
      location_id:
        description: Optional place/location ID
        required: false
        type: string
      start_date:
        description: Start date (YYYY-MM-DD) optional
        required: false
        type: string
      end_date:
        description: End date (YYYY-MM-DD) optional
        required: false
        type: string
      business_type:
        description: Business type (default restaurant)
        required: false
        type: string

jobs:
  run-booking-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      # Azure SQL source
      D6_DB_SERVER: ${{ secrets.D6_DB_SERVER }}
      D6_DB_DATABASE: ${{ secrets.D6_DB_DATABASE }}
      D6_DB_USER: ${{ secrets.D6_DB_USER }}
      D6_DB_PASSWORD: ${{ secrets.D6_DB_PASSWORD }}
      # Supabase target
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      # Parameters
      ORGANIZATION_ID: ${{ inputs.organization_id }}
      LOCATION_ID: ${{ inputs.location_id }}
      START_DATE: ${{ inputs.start_date }}
      END_DATE: ${{ inputs.end_date }}
      BUSINESS_TYPE: ${{ inputs.business_type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner public IP
        run: |
          echo "üîç Runner Public IP: $(curl -s https://api.ipify.org)" | tee -a $GITHUB_STEP_SUMMARY
          echo "üìù Add this IP to Azure SQL firewall rules to allow connection"

      - name: Network diagnostics to Azure SQL
        run: |
          echo "üîé DNS resolution for server: $D6_DB_SERVER"
          getent hosts "$D6_DB_SERVER" || true
          echo "\nüîå Probing TCP 1433 with openssl (5s timeout)"
          timeout 5 openssl s_client -connect "$D6_DB_SERVER:1433" -tls1_2 -brief </dev/null || true
          echo "\nüß™ Probing TCP 1433 with bash TCP (5s timeout)"
          timeout 5 bash -lc "</dev/tcp/$D6_DB_SERVER/1433" && echo "TCP 1433 reachable" || echo "TCP 1433 not reachable"
          echo "\nIf both probes fail, Azure SQL firewall or public access is blocking the runner."

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (ODBC)
        run: |
          sudo su -c 'curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -'
          sudo su -c 'curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list > /etc/apt/sources.list.d/mssql-release.list'
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-booking-${{ hashFiles('services/api/booking_integration_service/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-booking-

      - name: Install Python dependencies
        working-directory: services/api/booking_integration_service
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y supabase || true
          pip install --no-cache-dir -r requirements.txt
          # If the app imports supabase at runtime, install a known-good version
          pip install --no-cache-dir supabase==2.7.4
          python - <<'PY'
          import sys
          try:
              import supabase
              print('supabase version:', getattr(supabase, '__version__', 'unknown'))
          except Exception as e:
              print('supabase import failed:', e)
          PY

      - name: Run booking sync
        working-directory: services/api/booking_integration_service
        run: |
          python booking_sync_github.py

      - name: Summary
        run: |
          echo "Booking sync completed for organization_id=${{ inputs.organization_id }}" >> $GITHUB_STEP_SUMMARY


